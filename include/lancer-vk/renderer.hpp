#pragma once
#include "./config.hpp"
#include "./driver.hpp"
#include "./thread.hpp"
#include "./context.hpp"
#include "./mesh.hpp"
#include "./node.hpp"

namespace lancer {

    // TODO: Descriptor Sets
    class Renderer : public std::enable_shared_from_this<Renderer> { public: // 
        Renderer(){};
        Renderer(const std::shared_ptr<Context>& context) {
            this->driver = context->getDriver();
            this->thread = std::make_shared<Thread>(this->driver);
            this->context = context;

            // get ray-tracing properties
            this->properties.pNext = &this->rayTracingProperties;
            vkGetPhysicalDeviceProperties2(driver->getPhysicalDevice(), &(VkPhysicalDeviceProperties2&)this->properties);
            //driver->getPhysicalDevice().getProperties2(this->properties); // Vulkan-HPP Bugged

            // 
            const auto& rtxp = rayTracingProperties;
            this->rawSBTBuffer = vkt::Vector<uint64_t>(std::make_shared<vkt::VmaBufferAllocation>(this->driver->getAllocator(), vkh::VkBufferCreateInfo{ .size = rtxp.shaderGroupHandleSize *8u, .usage = { .eTransferSrc = 1, .eUniformBuffer = 1, .eRayTracing = 1 } }, VMA_MEMORY_USAGE_CPU_TO_GPU));
            this->gpuSBTBuffer = vkt::Vector<uint64_t>(std::make_shared<vkt::VmaBufferAllocation>(this->driver->getAllocator(), vkh::VkBufferCreateInfo{ .size = rtxp.shaderGroupHandleSize *8u, .usage = { .eTransferDst = 1, .eUniformBuffer = 1, .eRayTracing = 1 } }, VMA_MEMORY_USAGE_GPU_ONLY));
        };

        // 
        std::shared_ptr<Renderer> linkMaterial(const std::shared_ptr<Material>& materials = {}) {
            this->materials = materials;
            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> linkNode(const std::shared_ptr<Node>& node = {}) {
            this->node = node;
            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupRayTracingPipeline() {
            const std::vector<vkh::VkPipelineShaderStageCreateInfo> stages = vkt::vector_cast<vkh::VkPipelineShaderStageCreateInfo, vk::PipelineShaderStageCreateInfo>({
                vkt::makePipelineStageInfo(driver->getDevice(), vkt::readBinary("./shaders/rtrace/pathtrace.rgen.spv" ), vk::ShaderStageFlagBits::eRaygenNV),
                vkt::makePipelineStageInfo(driver->getDevice(), vkt::readBinary("./shaders/rtrace/pathtrace.rchit.spv"), vk::ShaderStageFlagBits::eClosestHitNV),
                vkt::makePipelineStageInfo(driver->getDevice(), vkt::readBinary("./shaders/rtrace/pathtrace.rmiss.spv"), vk::ShaderStageFlagBits::eMissNV)
            });

            this->rayTraceInfo = vkh::VsRayTracingPipelineCreateInfoHelper();
            this->rayTraceInfo.vkInfo.layout = this->context->unifiedPipelineLayout;
            this->rayTraceInfo.addShaderStages(stages);
            this->rayTracingState = driver->getDevice().createRayTracingPipelineNV(driver->getPipelineCache(),this->rayTraceInfo,nullptr,this->driver->getDispatch());

            // get ray-tracing properties
            this->driver->getDevice().getRayTracingShaderGroupHandlesNV(this->rayTracingState,0u,this->rayTraceInfo.groupCount(),this->rayTraceInfo.groupCount()*rayTracingProperties.shaderGroupHandleSize,this->rawSBTBuffer.data(),this->driver->getDispatch());
            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupBackgroundPipeline() {
            const auto& viewport = this->context->refViewport();
            const auto& renderArea = this->context->refScissor();

            this->skyboxedInfo = vkh::VsGraphicsPipelineCreateInfoConstruction();
            for (uint32_t i = 0u; i < 4u; i++) {
                this->skyboxedInfo.colorBlendAttachmentStates.push_back(vkh::VkPipelineColorBlendAttachmentState{ .blendEnable = false }); // transparency will generated by ray-tracing
            };

            this->skyboxedInfo.stages = vkt::vector_cast<vkh::VkPipelineShaderStageCreateInfo, vk::PipelineShaderStageCreateInfo>({
                vkt::makePipelineStageInfo(this->driver->getDevice(), vkt::readBinary("./shaders/rtrace/background.vert.spv"), vk::ShaderStageFlagBits::eVertex),
                vkt::makePipelineStageInfo(this->driver->getDevice(), vkt::readBinary("./shaders/rtrace/background.frag.spv"), vk::ShaderStageFlagBits::eFragment)
            });

            this->skyboxedInfo.depthStencilState = vkh::VkPipelineDepthStencilStateCreateInfo{
                .depthTestEnable = true,
                .depthWriteEnable = true
            };

            this->skyboxedInfo.inputAssemblyState.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;
            this->skyboxedInfo.dynamicStates.push_back(VK_DYNAMIC_STATE_VIEWPORT);
            this->skyboxedInfo.dynamicStates.push_back(VK_DYNAMIC_STATE_SCISSOR);
            this->skyboxedInfo.graphicsPipelineCreateInfo.renderPass = this->context->renderPass;
            this->skyboxedInfo.graphicsPipelineCreateInfo.layout = this->context->unifiedPipelineLayout;
            this->skyboxedInfo.viewportState.pViewports = &(vkh::VkViewport&)viewport;
            this->skyboxedInfo.viewportState.pScissors = &(vkh::VkRect2D&)renderArea;
            this->backgroundStage = driver->getDevice().createGraphicsPipeline(driver->getPipelineCache(), this->skyboxedInfo);

            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupResamplingPipeline() {
            const auto& viewport = this->context->refViewport();
            const auto& renderArea = this->context->refScissor();

            this->pipelineInfo = vkh::VsGraphicsPipelineCreateInfoConstruction();
            for (uint32_t i = 0u; i < 4u; i++) { // 
                this->pipelineInfo.colorBlendAttachmentStates.push_back(vkh::VkPipelineColorBlendAttachmentState{
                    .blendEnable = true,
                    .srcColorBlendFactor = VK_BLEND_FACTOR_ONE,
                    .dstColorBlendFactor = VK_BLEND_FACTOR_ONE,
                    .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
                    .dstAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
                });
            };

            this->pipelineInfo.stages = vkt::vector_cast<vkh::VkPipelineShaderStageCreateInfo, vk::PipelineShaderStageCreateInfo>({ // 
                vkt::makePipelineStageInfo(this->driver->getDevice(), vkt::readBinary("./shaders/rtrace/resample.vert.spv"), vk::ShaderStageFlagBits::eVertex),
                vkt::makePipelineStageInfo(this->driver->getDevice(), vkt::readBinary("./shaders/rtrace/resample.frag.spv"), vk::ShaderStageFlagBits::eFragment)
            });

            this->pipelineInfo.depthStencilState = vkh::VkPipelineDepthStencilStateCreateInfo{
                .depthTestEnable = false,
                .depthWriteEnable = false
            };

            this->pipelineInfo.inputAssemblyState.topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST;
            this->pipelineInfo.graphicsPipelineCreateInfo.renderPass = this->context->renderPass;
            this->pipelineInfo.graphicsPipelineCreateInfo.layout = this->context->unifiedPipelineLayout;
            this->pipelineInfo.viewportState.pViewports = &(vkh::VkViewport&)viewport;
            this->pipelineInfo.viewportState.pScissors = &(vkh::VkRect2D&)renderArea;
            this->pipelineInfo.dynamicStates.push_back(VK_DYNAMIC_STATE_VIEWPORT);
            this->pipelineInfo.dynamicStates.push_back(VK_DYNAMIC_STATE_SCISSOR);
            this->resamplingState = driver->getDevice().createGraphicsPipeline(driver->getPipelineCache(), this->pipelineInfo);

            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupSkyboxedCommand(const vk::CommandBuffer& rasterCommand = {}, const glm::uvec4& meshData = glm::uvec4(0u)) { // 
            const auto& viewport = this->context->refViewport();
            const auto& renderArea = this->context->refScissor();
            const auto clearValues = std::vector<vk::ClearValue>{
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 1.0f}),
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 1.0f}),
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 1.0f}),
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 1.0f}),
                vk::ClearDepthStencilValue(1.0f, 0)
            };

            // 
            this->context->descriptorSets[3] = this->context->smpFlip0DescriptorSet;

            // 
            rasterCommand.clearDepthStencilImage(this->context->depthImage, vk::ImageLayout::eGeneral, clearValues[4u].depthStencil, (vk::ImageSubresourceRange&)this->context->depthImage.subresourceRange);
            vkt::commandBarrier(this->cmdbuf);
            rasterCommand.beginRenderPass(vk::RenderPassBeginInfo(this->context->refRenderPass(), this->context->deferredFramebuffer, renderArea, clearValues.size(), clearValues.data()), vk::SubpassContents::eInline);
            rasterCommand.setViewport(0, { viewport });
            rasterCommand.setScissor(0, { renderArea });
            rasterCommand.pushConstants<glm::uvec4>(this->context->unifiedPipelineLayout, vk::ShaderStageFlags(VkShaderStageFlags(vkh::VkShaderStageFlags{ .eVertex = 1, .eFragment = 1, .eRaygen = 1, .eClosestHit = 1 })), 0u, { meshData });
            rasterCommand.bindDescriptorSets(vk::PipelineBindPoint::eGraphics, this->context->unifiedPipelineLayout, 0ull, this->context->descriptorSets, {});
            rasterCommand.bindPipeline(vk::PipelineBindPoint::eGraphics, this->backgroundStage);
            rasterCommand.draw(4u, 1u, 0u, 0u);
            rasterCommand.endRenderPass();
            vkt::commandBarrier(rasterCommand);

            // 
            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupResampleCommand(const vk::CommandBuffer& resampleCommand = {}, const glm::uvec4& meshData = glm::uvec4(0u)) {
            const auto& viewport  = this->context->refViewport();
            const auto& renderArea = this->context->refScissor();
            const auto clearValues = std::vector<vk::ClearValue>{ 
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 0.f}), 
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 0.f}), 
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 0.f}), 
                vk::ClearColorValue(std::array<float,4>{0.f, 0.f, 0.f, 0.f}), 
                vk::ClearDepthStencilValue(1.f, 0)
            };

            this->context->descriptorSets[3] = this->context->smpFlip1DescriptorSet;

            // 
            resampleCommand.beginRenderPass(vk::RenderPassBeginInfo(this->context->refRenderPass(), this->context->smpFlip0Framebuffer, renderArea, clearValues.size(), clearValues.data()), vk::SubpassContents::eInline);
            resampleCommand.bindPipeline(vk::PipelineBindPoint::eGraphics, this->resamplingState);
            resampleCommand.bindDescriptorSets(vk::PipelineBindPoint::eGraphics, this->context->unifiedPipelineLayout, 0ull, this->context->descriptorSets, {});
            resampleCommand.pushConstants<glm::uvec4>(this->context->unifiedPipelineLayout, vk::ShaderStageFlags(VkShaderStageFlags(vkh::VkShaderStageFlags{ .eVertex = 1, .eFragment = 1, .eRaygen = 1, .eClosestHit = 1 })), 0u, { meshData });
            resampleCommand.setViewport(0, { viewport });
            resampleCommand.setScissor(0, { renderArea });
            resampleCommand.draw(renderArea.extent.width, renderArea.extent.height, 0u, 0u);
            resampleCommand.endRenderPass();
            vkt::commandBarrier(resampleCommand);

            // 
            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupRayTraceCommand(const vk::CommandBuffer& rayTraceCommand = {}, const glm::uvec4& meshData = glm::uvec4(0u)) { // get ray-tracing properties
            const auto& rtxp = this->rayTracingProperties;
            const auto& renderArea = this->context->refScissor();

            this->context->descriptorSets[3] = this->context->smpFlip1DescriptorSet;

            // copy resampled data into ray tracing samples
            for (uint32_t i = 0; i < 2; i++) {
                rayTraceCommand.copyImage(this->context->smFlip0Images[i], this->context->smFlip0Images[i], this->context->smFlip1Images[i], this->context->smFlip1Images[i], { vk::ImageCopy(
                    this->context->smFlip0Images[i], vk::Offset3D{0u,0u,0u}, this->context->smFlip1Images[i], vk::Offset3D{0u,0u,0u}, vk::Extent3D{renderArea.extent.width, renderArea.extent.height, 1u}
                ) });
            };

            // 
            rayTraceCommand.copyBuffer(this->rawSBTBuffer, this->gpuSBTBuffer, { vk::BufferCopy(this->rawSBTBuffer.offset(),this->gpuSBTBuffer.offset(),this->rayTraceInfo.groupCount() * rtxp.shaderGroupHandleSize) });
            vkt::commandBarrier(rayTraceCommand);
            rayTraceCommand.bindPipeline(vk::PipelineBindPoint::eRayTracingNV, this->rayTracingState);
            rayTraceCommand.bindDescriptorSets(vk::PipelineBindPoint::eRayTracingNV, this->context->unifiedPipelineLayout, 0ull, this->context->descriptorSets, {});
            rayTraceCommand.pushConstants<glm::uvec4>(this->context->unifiedPipelineLayout, vk::ShaderStageFlags(VkShaderStageFlags(vkh::VkShaderStageFlags{ .eVertex = 1, .eFragment = 1, .eRaygen = 1, .eClosestHit = 1 })), 0u, { meshData });
            rayTraceCommand.traceRaysNV(
                this->gpuSBTBuffer, this->gpuSBTBuffer.offset(),
                this->gpuSBTBuffer, this->gpuSBTBuffer.offset() + this->rayTraceInfo.missOffsetIndex() * rtxp.shaderGroupHandleSize, rtxp.shaderGroupHandleSize,
                this->gpuSBTBuffer, this->gpuSBTBuffer.offset() + this->rayTraceInfo.hitOffsetIndex() * rtxp.shaderGroupHandleSize, rtxp.shaderGroupHandleSize,
                {}, 0u, 0u,
                renderArea.extent.width, renderArea.extent.height, 1u,
                this->driver->getDispatch()
            );
            vkt::commandBarrier(rayTraceCommand);
            return shared_from_this();
        };

        // 
        std::shared_ptr<Renderer> setupCommands() { // setup Commands
            if (!this->context->refRenderPass()) {
                this->context->createRenderPass();
            };

            // 
            this->cmdbuf = vkt::createCommandBuffer(*thread, *thread);
            this->cmdbuf.copyBuffer(context->uniformRawData, context->uniformGPUData, { vk::BufferCopy(context->uniformRawData.offset(), context->uniformGPUData.offset(), context->uniformGPUData.range()) });
            //this->cmdbuf.updateBuffer<Matrices>(context->uniformGPUData, context->uniformGPUData.offset(), context->uniformData);
            vkt::commandBarrier(this->cmdbuf);

            // prepare meshes for ray-tracing
            for (auto& M : this->node->meshes) { M->copyBuffers(this->cmdbuf); }; // copy concurrently
            vkt::commandBarrier(this->cmdbuf);
            for (auto& M : this->node->meshes) { M->buildAccelerationStructure(this->cmdbuf); }; // build concurrently
            vkt::commandBarrier(this->cmdbuf);

            // setup instanced and material data
            this->materials->copyBuffers(this->cmdbuf)->createDescriptorSet();
            this->node->buildAccelerationStructure(this->cmdbuf)->createDescriptorSet();

            // first-step rendering
            this->setupBackgroundPipeline()->setupSkyboxedCommand(this->cmdbuf); uint32_t I = 0u;
            for (auto& M : this->node->meshes) { M->createRasterizePipeline()->createRasterizeCommand(this->cmdbuf, glm::uvec4(I++,0u,0u,0u)); }; // draw concurrently
            vkt::commandBarrier(this->cmdbuf);

            // 
            this->setupResamplingPipeline()->setupResampleCommand(this->cmdbuf);
            this->setupRayTracingPipeline()->setupRayTraceCommand(this->cmdbuf);

            // 
            this->cmdbuf.end();
            return shared_from_this();
        };

        // 
        vk::CommandBuffer& refCommandBuffer() { return cmdbuf; };
        const vk::CommandBuffer& refCommandBuffer() const { return cmdbuf; };

    protected: // 
        //std::vector<vk::CommandBuffer> commands = {};
        vk::CommandBuffer cmdbuf = {};

        // 
        vk::Pipeline backgroundStage = {};
        vk::Pipeline rayTracingStage = {};
        vk::Pipeline resamplingStage = {};
        //vk::Pipeline denoiseStage = {};
        //vk::Pipeline compileStage = {};

        // binding data
        std::shared_ptr<Material> materials = {}; // materials
        std::shared_ptr<Node> node = {}; // currently only one node... 

        // 
        vkh::VsGraphicsPipelineCreateInfoConstruction skyboxedInfo = {};
        vkh::VsGraphicsPipelineCreateInfoConstruction pipelineInfo = {};
        vkh::VsRayTracingPipelineCreateInfoHelper rayTraceInfo = {};

        // 
        vk::Pipeline resamplingState = {};
        vk::Pipeline rayTracingState = {};

        // 
        vkt::Vector<uint64_t> gpuSBTBuffer = {};
        vkt::Vector<uint64_t> rawSBTBuffer = {};

        // 
        std::shared_ptr<Context> context = {};
        std::shared_ptr<Driver> driver = {};
        std::shared_ptr<Thread> thread = {};
        
        // 
        vk::PhysicalDeviceRayTracingPropertiesNV rayTracingProperties = {};
        vk::PhysicalDeviceProperties2 properties = {};

        //std::vector<std::shared_ptr<Instance>> instances = {};
        //std::vector<std::shared_ptr<Material>> materials = {};
    };

};
